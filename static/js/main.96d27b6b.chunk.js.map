{"version":3,"sources":["components/HomepageNav.js","components/Homepage.js","components/Row.js","request.js","components/Banner.js","components/NavBar.js","components/LoggedIn.js","PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["HomepageNav","props","responseGoogle","response","console","log","profileObj","localStorage","setItem","JSON","stringify","setState","redirect","state","this","to","noThrow","className","src","clientId","render","renderProps","onClick","buttonText","onSuccess","onFailure","cookiePolicy","Component","Homepage","Row","handleMovieTrailer","movieName","trailerPath","movieTrailer","then","resp","urlParams","URLSearchParams","URL","search","get","catch","error","movies","fetch","request","json","results","title","map","item","backdrop_path","largeImages","poster_path","alt","original_name","name","videoId","opts","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","bannerImage","Math","floor","random","length","style","backgroundImage","backgroundSize","backgroundPosition","overview","slice","NavBar","listenScrollEvent","e","window","scrollY","scroll","addEventListener","href","LoggedIn","PrivateRoute","user","parse","getItem","Comp","as","location","from","React","App","source","createHashSource","history","createHistory","basename","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.96d27b6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './homepage-nav.css';\nimport GoogleLogin from 'react-google-login';\nimport { Redirect } from \"@reach/router\";\n\nclass HomepageNav extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            redirect:false\n        }\n    }\n\n\n    responseGoogle=response=>{\n        \n        console.log('response',response.profileObj);\n        if(response.profileObj){\n            localStorage.setItem('profileObj',JSON.stringify(response.profileObj))\n            this.setState({\n                redirect:true\n            })\n        }\n    }\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to=\"/loggedin\" noThrow />;\n        }\n        return (\n            <div className=\"homepage-nav\">\n                <img className=\"home-nav-logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"/>\n                \n                <GoogleLogin\n                                    clientId=\"846660842017-iqokg41jpqohmujg4elthu1q7usis6u9.apps.googleusercontent.com\"\n                                    render={renderProps => (\n                                        <button className=\"sign-in-button\" onClick={renderProps.onClick}>Sign In</button>\n                                    )}\n                                    buttonText=\"SignIn\"\n                                    onSuccess={this.responseGoogle}\n                                    onFailure={this.responseGoogle}\n                                    cookiePolicy={'single_host_origin'}\n                />\n            \n            </div>\n        );\n    }\n}\n\nexport default HomepageNav;\n\n\n","import React, { Component } from 'react';\nimport './homepage.css';\nimport HomepageNav from './HomepageNav'\n\nclass Homepage extends Component {\n    \n    render() {\n        return (\n            <div className=\"main\">\n                <HomepageNav/>\n                <img className=\"home-image\" src =\"https://assets.nflxext.com/ffe/siteui/vlv3/e8645526-57d7-4313-9c91-7240482510d7/528f05df-d400-4bc2-a306-577896af36de/IN-en-20200706-popsignuptwoweeks-perspective_alpha_website_small.jpg\"/>\n                <div className=\"text\">\n                    <h1 className=\"large-text\">Unlimited movies, TV shows and more.</h1>\n                    <p className=\"small-text\">Watch anywhere. Cancel anytime.</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Homepage;","import React, { Component } from 'react';\nimport './row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer'\n\nconst baseUrl = 'https://api.themoviedb.org/3';\nconst imageBase_url = 'https://image.tmdb.org/t/p/original';\nclass Row extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            movies :[],\n            trailerPath:''\n        }\n    }\n\n    componentDidMount(){\n        fetch(`${baseUrl}${this.props.request}`)\n        .then(resp=>resp.json())\n        .then(response=>{\n            console.log(response.results)\n            this.setState({\n                movies:response.results\n            },()=>{\n                console.log(\"m\",this.state.movies)\n            })\n        })   \n    }\n\n    handleMovieTrailer=(movieName)=>{\n        if(this.state.trailerPath){\n            this.setState({\n                trailerPath:''\n            })\n        }\n        else{\n\n            movieTrailer( movieName || '' )\n            .then((resp)=> {\n                const urlParams = new URLSearchParams(new URL(resp).search);\n                // debugger;\n                this.setState({\n                    trailerPath:urlParams.get('v')\n                })\n            }).catch( console.error )\n            \n        }\n    }\n\n    render() {\n        const opts = {\n            height: '390',\n            width: '100%',\n            playerVars: {\n              // https://developers.google.com/youtube/player_parameters\n              autoplay: 1,\n            },\n          };\n        return (\n            <div>\n                <h2 className='netflix-headings'>{this.props.title}</h2>\n                <div className=\"image-row\">\n                    {this.state.movies?this.state.movies.map(item=>{\n                        if(item.backdrop_path){\n                            return <img className={this.props.largeImages?\"large-image\":\"image\"} src={`${imageBase_url}${this.props.largeImages?item.poster_path:item.backdrop_path}`} alt ={item.original_name} onClick={()=>this.handleMovieTrailer(item.name)}/>\n                        }\n                        else{\n                            return null;\n                        }\n                    }):null}\n\n                </div>\n                <div>\n                {this.state.trailerPath?<YouTube videoId={this.state.trailerPath} opts={opts}/>:null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Row;","const API_KEY = '46e8e8db28cc36768c2e7b1f9bce5274';\n\nconst request = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies :`/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies :`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies :`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries :`/discover/movie?api_key=${API_KEY}&with_genres=99`\n}\n\nexport default request;","import React, { Component } from 'react';\nimport './banner.css'\n\nconst base_Url = 'https://api.themoviedb.org/3';\nconst imageBase_url = 'https://image.tmdb.org/t/p/original';\nclass Banner extends Component {\n    state={\n        bannerImage:''\n    }\n    componentDidMount(){\n        fetch(`${base_Url}${this.props.request}`)\n        .then(resp=>resp.json())\n        .then(response=>{\n            this.setState({\n                \n                bannerImage:response.results[Math.floor(Math.random()*response.results.length)]\n            },()=>{\n                console.log('b',this.state.bannerImage)\n            })\n        })\n    }\n    render() {\n        return (\n            <div>\n                <header className=\"banner\" style={{backgroundImage:`url(${imageBase_url}${this.state.bannerImage.backdrop_path})`,backgroundSize:'cover',backgroundPosition:'center center'}}>\n                    <div className=\"info-div\">\n                        <h1 className=\"title\">{this.state.bannerImage.original_name || this.state.bannerImage.name}</h1>\n                        <div className='buttons-div'>\n                            <button className=\"buttons\">Play</button>\n                            <button className=\"buttons\">My list</button>\n                        </div>\n                        <div className='movie-overview'>\n                            <p>{this.state.bannerImage.overview?this.state.bannerImage.overview.length>150?this.state.bannerImage.overview.slice(0,150)+'...':this.state.bannerImage.overview:''}</p>\n                        </div>\n\n                    </div>\n                    <div className=\"fade-bottom\"></div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default Banner;","import React, { Component } from 'react';\nimport './navbar.css' ;\n\nclass NavBar extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            scroll:false\n        }\n    }\n    componentDidMount(){\n        window.addEventListener('scroll', this.listenScrollEvent)\n    }\n    listenScrollEvent = e => {\n        if (window.scrollY > 100) {\n          this.setState({scroll: true})\n        } else {\n          this.setState({scroll: false})\n        }\n      }\n    render() {\n        return (\n            <div className={`navbar ${this.state.scroll?'navbar-scroll':''}`} >\n                <a href=\"/loggedin\"><img className=\"nav-logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"/></a>\n                <img className=\"user-logo\" src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"/>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport Row from './Row';\nimport request from '../request.js';\nimport Banner from './Banner';\nimport NavBar from './NavBar.js';\n\nclass LoggedIn extends Component {\n    render() {\n        return (\n            <div>\n                <NavBar/>\n                <Banner request={request.fetchNetflixOriginals}/>\n                <Row title='NETFLIX ORIGINALS' request={request.fetchNetflixOriginals} largeImages/>\n                <Row title='Trending' request={request.fetchTrending}/>\n                <Row title='Top Rated' request={request.fetchTopRated}/>\n                <Row title='Action Movies' request={request.fetchActionMovies}/>\n                <Row title='Horror Movies' request={request.fetchHorrorMovies}/>\n                <Row title='Romantic Movies' request={request.fetchRomanceMovies}/>\n                <Row title='Documentaries' request={request.fetchDocumentaries}/>\n            </div>\n        );\n    }\n}\n\nexport default LoggedIn;","import React from 'react';\nimport Homepage from './components/Homepage'\nimport { Redirect } from '@reach/router';\n\nclass PrivateRoute extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state={\n            user:null\n        }\n    }\n    componentWillMount(){\n      debugger;\n      console.log('yo')\n      let user = JSON.parse(localStorage.getItem('profileObj'));\n      if(user){\n        this.setState({\n          user:user\n        })\n      }\n    }\n  \n    render() {\n      let { as: Comp,location, ...props } = this.props;\n      return this.state.user ? <Comp {...props} />:<Redirect from=\"\" to='/' noThrow /> ;\n    }\n  }\n  export default PrivateRoute;","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Homepage from './components/Homepage'\nimport LoggedIn from './components/LoggedIn';\nimport {Router,createHistory,\n  LocationProvider,} from '@reach/router';\n  import createHashSource from 'hash-source'\nimport PrivateRoute from './PrivateRoute.js'\n\nfunction App() {\n \n  let source = createHashSource();\n  let history = createHistory(source);\n  console.log(history,source);\n    return (\n        <LocationProvider history={history}>\n          <div className=\"App\">\n\n            <Router basename='/Netflix-Clone' >\n                  <Homepage path='/'/>\n                  <PrivateRoute as={LoggedIn} path=\"/LoggedIn\" />\n                  {/* <LoggedIn path = '/loggedin'/> */}\n                  \n            </Router>\n          </div>\n        </LocationProvider>\n        \n    );\n  \n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}